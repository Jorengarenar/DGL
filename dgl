#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

from optparse import OptionParser
import glob
import json
import os
import re
import readline

__version__ = "0.8.9"

# Command line options
parser = OptionParser()
parser.add_option("-e", "--edit-json",
                  action="store_true", dest="edit", default=False,
                  help="edit JSON file")
parser.add_option("-v", "--version",
                  action="store_true", dest="version", default=False,
                  help="print version number")
(options, args) = parser.parse_args()

if options.version:
    print(__version__)
    exit()

# Path completion (could be better)


def complete(text, state):
    return (glob.glob(text+'*')+[None])[state]


readline.set_completer_delims(' \t\n;')
readline.parse_and_bind("tab: complete")
readline.set_completer(complete)


# Already filled input to edit
def rlinput(prompt, prefill=''):
    readline.set_startup_hook(lambda: readline.insert_text(prefill))
    try:
        return input(prompt)
    finally:
        readline.set_startup_hook()

# Function for getting ID to edit or delete


def get_id_for_editing(titles, id_table):
    for j in range(len(titles)):
        print("[", j+1, "] ", titles[j], sep="")

    to_edit_id_temp = int(input("Edit: ")) - 1
    to_edit_title = titles[to_edit_id_temp]
    return id_table[to_edit_title]


# Path to games.json file with list of titles. types and their file pathes / commands
if "XDG_DATA_HOME" in os.environ:
    games_json_file_path = os.environ["XDG_DATA_HOME"] + "/dgl/games.json"
else:
    games_json_file_path = os.environ["HOME"] + "/.local/share/dgl/games.json"

# Create directory from 'games_json_file_path' if not exists
os.makedirs(os.path.dirname(games_json_file_path), exist_ok=True)

# Inicialize file 'games.json'
if not os.path.isfile(games_json_file_path):
    with open(games_json_file_path, "w") as games_json_file:
        games_json_file.write("[]")
else:
    if os.stat(games_json_file_path).st_size == 0:
        with open(games_json_file_path, "w") as games_json_file:
            games_json_file.write("[]")

# Load data from 'games.json'
with open(games_json_file_path) as games_json_file:
    data = json.load(games_json_file)

# Create table with game titles and their "JSON ID"
i = 0
id_table = {}
titles = []
for x in data:
    titles.append(x["title"])
    id_table[x["title"]] = i
    i += 1

# Sort titles list
titles = sorted(titles, key=str.lower)

if options.edit:
    try:
        print("What do you want to do?")
        print("[1] Add new entry")
        print("[2] Edit existing entry")
        print("[3] Delete entry")
        print("[4] List titles")

        option = int(input("Action [1-4]: "))

        if option == 1:

            title = input("Title: ")
            while not title:
                print("Title cannot be empty!")
                title = input("Title: ")

            while(title in titles):
                print("Entry with that title already exist!")
                title = input("Title: ")

            type = input("Type: ")

            while type not in ["wine", "dos", "regular"]:
                print("Type must be wine, dos or regular!")
                type = input("Type: ")

            if type == "dos" or type == "wine":
                executive = input("Path: ")
                while not executive:
                    print("Path cannot be empty!")
                    executive = input("Path: ")
            else:
                executive = input("Command: ")
                while not executive:
                    print("Command cannot be empty!")
                    executive = input("Path: ")

            new_data = [
                {
                    "title": title,
                    "type": type,
                    "executive": executive
                }
            ]

            data += new_data

            with open(games_json_file_path, 'w') as games_json_file:
                games_json_file.write(json.dumps(
                    data, indent=4, separators=(',', ': ')))

        elif option == 2:
            if len(data) == 0:
                print("Nothing to edit")
            else:
                to_edit_id = get_id_for_editing(titles, id_table)

                data[to_edit_id]["title"] = rlinput(
                    "Title: ", data[to_edit_id]["title"])
                data[to_edit_id]["type"] = rlinput(
                    "Type:  ", data[to_edit_id]["type"])
                data[to_edit_id]["executive"] = rlinput(
                    "Command/path: ", data[to_edit_id]["executive"])

                with open(games_json_file_path, 'w') as games_json_file:
                    games_json_file.write(json.dumps(
                        data, indent=4, separators=(',', ': ')))

        elif option == 3:
            if len(data) == 0:
                print("Nothing to delete")
            else:
                for j in range(len(titles)):
                    print("[", j+1, "] ", titles[j], sep="")

                to_delete_id_temp = int(input("Delete: ")) - 1
                to_delete_title = titles[to_delete_id_temp]
                to_delete_id = id_table[to_delete_title]

                data.pop(to_delete_id)

                with open(games_json_file_path, 'w') as games_json_file:
                    games_json_file.write(json.dumps(
                        data, indent=4, separators=(',', ': ')))
        elif option == 4:
            for x in titles:
                print(x)
        else:
            print("No such action")

    except KeyboardInterrupt:
        print()
        exit()
else:
    first_desktop_id = i

    # List for commands from .desktop files
    executables = {}

    # List of .desktop files
    if "XDG_DATA_HOME" in os.environ:
        desktops = glob.glob(
            os.environ["XDG_DATA_HOME"] + "/dgl/desktops/*.desktop")
    else:
        desktops = glob.glob(
            os.environ["HOME"] + "/.local/share/dgl/desktops/*.desktop")

    # .desktop RegEx patterns
    desktop_name_pattern = r"Name=(.*)"
    desktop_exec_pattern = r"Exec=(.*)"

    # Check .desktop files
    for desktop_path in desktops:
        with open(desktop_path) as desktop_file:
            desktop = desktop_file.read()
            name = re.findall(desktop_name_pattern, desktop)[0]
            if not name in titles:  # JSON takes priority over .desktop and Steam
                titles.append(name)
                executables[i] = re.findall(desktop_exec_pattern, desktop)[0]
                id_table[name] = i
                i += 1

    first_steam_id = i

    # List for Steam appids
    appid = {}

    # List of Steam applications' manifest files
    if "XDG_DATA_HOME" in os.environ:
        manifests = glob.glob(
            os.environ["XDG_DATA_HOME"] + "/Steam/steamapps/appmanifest_*")
    else:
        manifests = glob.glob(
            os.environ["HOME"] + "/.local/share/Steam/steamapps/appmanifest_*")

    # Steam RegEx patterns
    steam_name_pattern = r"\s*\"name\"\s*\"(.+)\""
    steam_appid_pattern = r"\s*\"appid\"\s*\"(\d+)\""
    steam_exclude_pattern = r".*(Proton|Steamworks Common Redistributables).*"

    # Check for installed Steam applications
    for manifest_path in manifests:
        with open(manifest_path) as manifest_file:
            manifest = manifest_file.read()
            name = re.findall(steam_name_pattern, manifest)[0]
            if not name in titles:  # JSON and .desktop takes priority over Steam
                if re.search(steam_exclude_pattern, name):
                    continue
                titles.append(name)
                appid[i] = re.findall(steam_appid_pattern, manifest)[0]
                id_table[name] = i
                i += 1

    # Dmenu command
    dmenu = "echo \"" + "\n".join(sorted(titles)) + "\" | dmenu -i"

    # Run dmenu and take from it game title
    selection = os.popen(dmenu).read()[:-1]

    # Get game ID based on game title
    try:
        id = id_table[selection]
    except KeyError:
        exit()

        # Define type of game based of its ID
    if id < first_desktop_id:
        executive = data[id]["executive"]
        type = data[id]["type"]
    elif id < first_steam_id:
        type = "desktop"
    else:
        type = "steam"

    # Define command to run based on type
    if type == "dos":
        cmd = "dosbox -exit " + executive
    elif type == "wine":
        cmd = "cd " + os.path.dirname(executive) + \
            " && wine " + os.path.basename(executive)
    elif type == "regular":
        cmd = executive
    elif type == "desktop":
        cmd = executables[id_table[selection]]
    elif type == "steam":
        cmd = "steam steam://rungameid/" + appid[id_table[selection]]

    # Run game
    os.system(cmd)

#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

import glob
import json
import os
import re

from optparse import OptionParser

parser = OptionParser()
parser.add_option("-e", "--edit-json",
        action="store_true", dest="edit", default=False,
        help="Edit JSON file")

(options, args) = parser.parse_args()

games_json_file_path = os.environ["HOME"] + "/.config/dmenu-game-launcher/games.json"

if os.stat(games_json_file_path).st_size == 0:
    with open(games_json_file_path, "w") as games_json_file:
        games_json_file.write("[]")

with open(games_json_file_path) as games_json_file:
    data = json.load(games_json_file)


if options.edit:
    print("What do you want to do?")
    print("[1] Add new entry")
    print("[2] Edit existing entry")
    print("[3] Delete entry")

    option = int(input())

    if option == 1:

        title = input("Title: ")
        type = input("Type: ")
        executive = input("Path: ")

        new_data = [
                {
                  "title": title,
                  "type": type,
                  "executive": executive
                }
              ]

        data += new_data

        with open(games_json_file_path, 'w') as outfile:
                json.dump(data, outfile)

    elif option == 3:
        for i in range(len(data)):
            print("[", i+1, "] ", data[i]["title"], sep="")

        to_delete = int(input("Which number delete? "))
        data.pop(to_delete - 1)

        open(games_json_file_path, "w").write( json.dumps(data, sort_keys=True, indent=4, separators=(',', ': '))

)

else:

    i = 0
    id_table = {}
    titles = []
    for x in data:
        titles.append(x["title"])
        id_table[x["title"]] = i
        i += 1

    first_desktop_id = i

    executables = {}

    desktops = glob.glob(os.environ["HOME"] + "/.config/dmenu-game-launcher/desktops/*.desktop")

    desktop_name_pattern = r"Name=(.*)"
    desktop_exec_pattern = r"Exec=(.*)"

    for desktop_path in desktops:
        with open(desktop_path) as desktop_file:
            desktop = desktop_file.read()
            name = re.findall(desktop_name_pattern, desktop)[0]
            titles.append(name)
            executables[i] = re.findall(desktop_exec_pattern, desktop)[0]
            id_table[name] = i
            i += 1

    first_steam_id = i

    appid = {}

    manifests = glob.glob(os.environ["HOME"] + "/.steam/steam/steamapps/appmanifest_*")

    steam_name_pattern = r"\s*\"name\"\s*\"(.+)\""
    steam_appid_pattern = r"\s*\"appid\"\s*\"(\d+)\""
    steam_exclude_pattern = r".*(Proton|Steamworks Common Redistributables).*"

    for manifest_path in manifests:
        with open(manifest_path) as manifest_file:
            manifest = manifest_file.read()
            name = re.findall(steam_name_pattern, manifest)[0]
            if re.search(steam_exclude_pattern, name):
                continue
            titles.append(name)
            appid[i] = re.findall(steam_appid_pattern, manifest)[0]
            id_table[name] = i
            i += 1

    dmenu = "echo \"" + "\n".join(sorted(titles)) + "\" | dmenu -i"

    selection = os.popen(dmenu).read()[:-1]

    id = id_table[selection]

    if id < first_desktop_id:
        executive = data[id]["executive"]
        type = data[id]["type"]
    elif id < first_steam_id:
        type = "desktop"
    else:
        type = "steam"

    if type == "dos":
        cmd = "dosbox -exit " + executive
    elif type == "wine":
        cmd = "cd " + os.path.dirname(executive) + " && wine " + os.path.basename(executive)
    elif type == "desktop":
        cmd = executables[id_table[selection]]
    elif type == "steam":
        cmd = "steam steam://rungameid/" + appid[id_table[selection]]

    os.system(cmd)
